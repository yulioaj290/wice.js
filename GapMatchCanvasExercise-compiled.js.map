{"version":3,"sources":["GapMatchCanvasExercise.js"],"names":[],"mappings":"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","file":"GapMatchCanvasExercise-compiled.js","sourcesContent":["/**\n * Project: ICE.js.\n * Author: Yulio Aleman Jimenez [@yulioaj290]\n * Date: 8/28/18\n * Created by WebStorm\n */\n\n/**\n * GapMatchCanvasExercise extends from CanvasExercise superclass.\n * Define the gap matching exercises\n */\nclass GapMatchCanvasExercise extends CanvasExercise {\n\n    /**\n     * Constructor of the GapMatchCanvasExercise class.\n     * @param canvasElementId\n     * @param canvasWidth\n     * @param imageSrc\n     * @param lineWidth\n     * @param lineColor\n     * @param lineHead\n     * @param fontFamily\n     * @param fontSize\n     * @param fontColor\n     * @param fontStyle\n     * @param fontAlign\n     * @param fontBaseline\n     * @param mark\n     * @param orderType\n     * @param listObjectsCoords\n     * @param listObjectsTags\n     * @param strokeRectObject\n     */\n    constructor(canvasElementId, canvasWidth = '', imageSrc = '',\n                lineWidth = '2', lineColor = '#000000', lineHead = false, fontFamily = 'Arial',\n                fontSize = '20', fontColor = '#000000', fontStyle = 'regular', fontAlign = 'center',\n                fontBaseline = 'middle', mark = 'X', orderType = ORDER_TYPE_NUM,\n                // Below are specific class parameters\n                listObjectsCoords = [], listObjectsTags = [], strokeRectObject = true,) {\n\n        super(canvasElementId, canvasWidth, imageSrc, lineWidth, lineColor, lineHead, fontFamily,\n            fontSize, fontColor, fontStyle, fontAlign, fontBaseline, mark, orderType);\n\n        // own properties of the class\n        this._listObjectsCoords = listObjectsCoords;    // array of objects coordinates in the image\n        this._listObjectsTags = listObjectsTags;        // array of objects tags in the image\n        this._listObjectsTagged = [];                   // array to store the array of objects coordinates tagged by user\n        this._strokeRectObject = strokeRectObject;      // define if object will be put into a rectangle\n\n        // binding click event to canvas element to allow the gap match exercise execution\n        this._canvasElement.addEventListener(\"click\", this.clickAction.bind(this), false);\n    }\n\n    /**\n     * Assign a Tag of object selected by click event over canvas element.\n     * This function uses the coordinates of the objects inside canvas element and the coordinates of the click event.\n     * @param event\n     * @returns {*}\n     */\n    clickAction(event) {\n        // Obtain mouse click position\n        let current_x = event.pageX - event.currentTarget.offsetLeft,\n            current_y = event.pageY - event.currentTarget.offsetTop;\n        // alert(`cursorX: ${cur_x}, cursorY: ${cur_y}`);\n\n        if (this._canvasElement.getContext) {\n            // getting 2d context from canvas element\n            let ctx = this._canvasElement.getContext(\"2d\");\n\n            // asking if object clicked was matched before\n            if (!this._isTaggedExercise(this._listObjectsTagged, [current_x, current_y], this._canvasDivisor, this._listObjectsTags.length)) {\n\n                // declaring variables\n                let x, y, x1, y1, cent_x, cent_y, op;\n\n                // looping the list of objects coordinates\n                for (let i = 0; i < this._listObjectsCoords.length; i++) {\n\n                    // Coordinates of the images\n                    // The canvas divisor allow to calc the exact position of every coordinate,\n                    // even if the canvas element is positioned anywhere inside the web page\n                    x = Math.round(this._listObjectsCoords[i][0] / this._canvasDivisor);\n                    y = Math.round(this._listObjectsCoords[i][1] / this._canvasDivisor);\n                    x1 = Math.round(this._listObjectsCoords[i][2] / this._canvasDivisor);\n                    y1 = Math.round(this._listObjectsCoords[i][3] / this._canvasDivisor);\n\n                    // init text properties\n                    ctx.font = `${this._fontStyle} ${this._fontSize}  ${this._fontFamily}`;\n                    ctx.fillStyle = this._fontColor;\n                    ctx.textAlign = this._fontAlign;\n                    ctx.textBaseline = this._fontBaseline;\n\n                    // loop control variable\n                    op = false;\n\n                    // asking if a valid object was clicked, based on coordinates of objects and click event\n                    if ((x <= current_x && current_x <= x1)\n                        && (y <= current_y && current_y <= y1)\n                        && (this._listObjectsTags.length > 0)) {\n\n                        // coordinates of the object center\n                        cent_x = Math.round(x1 - ((x1 - x) / 2));\n                        cent_y = Math.round(y1 - ((y1 - y) / 2));\n\n                        // write tag string\n                        ctx.fillText(this._listObjectsTags[0], cent_x, cent_y);\n\n                        // Fill rectangle\n                        if (this._strokeRectObject) {\n                            ctx.lineWidth = this._lineWidth;\n                            ctx.strokeStyle = this._lineColor;\n                            ctx.strokeRect(x, y, x1 - x, y1 - y);\n                        }\n\n                        // update tagged exercises\n                        this._listObjectsTagged[this._listObjectsTagged.length] = [this._listObjectsTags.shift(), this._listObjectsCoords[i]];\n\n                        op = true;\n                    }\n\n                    if (op) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Return an array of objects coordinates in the image\n     * @returns {Array|*}\n     */\n    getListObjectsCoords() {\n        console.log(JSON.stringify(this._listObjectsCoords));\n        return this._listObjectsCoords;\n    }\n\n    /**\n     * Return an array of objects tags in the image\n     * @returns {Array|*}\n     */\n    getListObjectsTags() {\n        console.log(JSON.stringify(this._listObjectsTags));\n        return this._listObjectsTags;\n    }\n\n    /**\n     * Return an array of arrays. Each one contains the object coordinate and the tag assigned\n     * @returns {Array}\n     */\n    getListObjectsTagged() {\n        console.log(JSON.stringify(this._listObjectsTagged));\n        return this._listObjectsTagged;\n    }\n\n    /**\n     * Determine if the element selected by click coordinates have been matched before.\n     * @param objectsTagged\n     * @param current_xy\n     * @param divisor\n     * @param cantTagged\n     * @returns {boolean}\n     * @private\n     */\n    _isTaggedExercise(objectsTagged, current_xy, divisor, cantTagged) {\n        for (let i = 0; i < objectsTagged.length; i++) {\n\n            // Coordinates of the images\n            let x = Math.round(objectsTagged[i][0] / divisor),\n                y = Math.round(objectsTagged[i][1] / divisor),\n                x1 = Math.round(objectsTagged[i][2] / divisor),\n                y1 = Math.round(objectsTagged[i][3] / divisor);\n\n            if ((x <= current_xy[0] && current_xy[0] <= x1) && (y <= current_xy[1] && current_xy[1] <= y1) && (cantTagged > 0)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nGapMatchCanvasExercise.exports = GapMatchCanvasExercise;\n\n"]}